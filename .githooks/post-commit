#!/bin/bash

# Ecliptix Desktop Post-Commit Hook
# Auto-versioning and build info generation based on commit message patterns

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
VERSION_SCRIPT="$PROJECT_ROOT/Scripts/version.sh"
CONFIG_FILE="$PROJECT_ROOT/Scripts/version-config.json"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_info() {
    echo -e "${BLUE}[POST-COMMIT]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[POST-COMMIT]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[POST-COMMIT]${NC} $1"
}

print_error() {
    echo -e "${RED}[POST-COMMIT]${NC} $1"
}

# Check if version script exists
if [ ! -f "$VERSION_SCRIPT" ]; then
    print_error "Version script not found: $VERSION_SCRIPT"
    exit 0  # Don't fail the commit, just skip versioning
fi

# Get current branch
CURRENT_BRANCH=$(git branch --show-current 2>/dev/null || git rev-parse --abbrev-ref HEAD)

# Check if we should process this branch (MAIN ONLY)
if [ "$CURRENT_BRANCH" != "main" ]; then
    print_info "Skipping auto-versioning on branch: $CURRENT_BRANCH (only main branch gets versioned)"
    exit 0
fi

# Get the commit message from the most recent commit
COMMIT_MESSAGE=$(git log -1 --pretty=%B)

# Determine version increment type based on commit message
INCREMENT_TYPE=""
if echo "$COMMIT_MESSAGE" | grep -qiE "\[major\]|BREAKING CHANGE:|breaking:"; then
    INCREMENT_TYPE="major"
elif echo "$COMMIT_MESSAGE" | grep -qiE "\[minor\]|feat:|feature:"; then
    INCREMENT_TYPE="minor"
elif echo "$COMMIT_MESSAGE" | grep -qiE "\[patch\]|fix:|bugfix:|hotfix:"; then
    INCREMENT_TYPE="patch"
elif echo "$COMMIT_MESSAGE" | grep -qiE "\[skip-version\]|\[no-version\]|docs:|chore:|style:|refactor:|test:"; then
    INCREMENT_TYPE="skip"
else
    # Default increment for commits without specific patterns
    INCREMENT_TYPE="patch"
fi

# Skip versioning if requested
if [ "$INCREMENT_TYPE" = "skip" ]; then
    print_info "Skipping version increment based on commit message pattern"
    # Still generate build info
    if "$VERSION_SCRIPT" --action build 2>/dev/null; then
        print_success "Build info updated"
    fi
    exit 0
fi

# Check if this commit already contains version changes to avoid double increment
if git show --name-only --pretty="" HEAD | grep -q "Ecliptix.Core/Directory.Build.props"; then
    print_info "Version files already modified in this commit, skipping auto-increment"
    # Generate build info
    if "$VERSION_SCRIPT" --action build 2>/dev/null; then
        print_success "Build info updated"
    fi
    exit 0
fi

print_info "Auto-versioning triggered by commit message pattern"
print_info "Increment type: $INCREMENT_TYPE"

# Get current version before increment
OLD_VERSION=$("$VERSION_SCRIPT" --action current 2>/dev/null | grep "Current version:" | cut -d' ' -f3 || echo "unknown")

# Increment version
if "$VERSION_SCRIPT" --action increment --part "$INCREMENT_TYPE" 2>/dev/null; then
    NEW_VERSION=$("$VERSION_SCRIPT" --action current 2>/dev/null | grep "Current version:" | cut -d' ' -f3 || echo "unknown")
    print_success "Version incremented: $OLD_VERSION â†’ $NEW_VERSION ($INCREMENT_TYPE)"
    
    # Generate build info
    if "$VERSION_SCRIPT" --action build 2>/dev/null; then
        print_success "Build info generated"
    fi
    
    # Create a new commit with version changes (if files were modified)
    cd "$PROJECT_ROOT"
    if git diff --quiet HEAD -- "Ecliptix.Core/Directory.Build.props" "build-info.json" 2>/dev/null; then
        print_info "No version files to commit"
    else
        # Stage version files
        git add "Ecliptix.Core/Directory.Build.props" 2>/dev/null || true
        git add "build-info.json" 2>/dev/null || true
        
        # Create version bump commit
        VERSION_COMMIT_MSG="chore: bump version to $NEW_VERSION

[skip-version] Automatic version increment from $OLD_VERSION to $NEW_VERSION

ðŸ¤– Generated by Ecliptix Auto-Versioning"
        
        if git commit -m "$VERSION_COMMIT_MSG" --no-verify 2>/dev/null; then
            print_success "Version bump commit created: $NEW_VERSION"
        fi
    fi
    
else
    print_warning "Failed to increment version, continuing without version change"
fi

exit 0